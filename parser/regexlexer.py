#!/usr/bin/env python3
import parser.lex as lex

lex.rules = [
	{'regex': '\\(', 'action': 'LPAREN', 'dfa': {'startState': 0, 'sigma': ['('], 'finStates': [1], 'deltaT': [[1], [None]]}},
	{'regex': '\\)', 'action': 'RPAREN', 'dfa': {'startState': 0, 'sigma': [')'], 'finStates': [1], 'deltaT': [[1], [None]]}},
	{'regex': '\\[', 'action': 'LBRAC', 'dfa': {'startState': 0, 'sigma': ['['], 'finStates': [1], 'deltaT': [[1], [None]]}},
	{'regex': '\\]', 'action': 'RBRAC', 'dfa': {'startState': 0, 'sigma': [']'], 'finStates': [1], 'deltaT': [[1], [None]]}},
	{'regex': '\\*', 'action': 'KLEENE', 'dfa': {'startState': 0, 'sigma': ['*'], 'finStates': [1], 'deltaT': [[1], [None]]}},
	{'regex': '\\+', 'action': 'PLUS', 'dfa': {'startState': 0, 'sigma': ['+'], 'finStates': [1], 'deltaT': [[1], [None]]}},
	{'regex': '\\?', 'action': 'QUESTION', 'dfa': {'startState': 0, 'sigma': ['?'], 'finStates': [1], 'deltaT': [[1], [None]]}},
	{'regex': '\\|', 'action': 'ALTERNATE', 'dfa': {'startState': 0, 'sigma': ['|'], 'finStates': [1], 'deltaT': [[1], [None]]}},
	{'regex': '\\^', 'action': 'CARET', 'dfa': {'startState': 0, 'sigma': ['^'], 'finStates': [1], 'deltaT': [[1], [None]]}},
	{'regex': '\\-', 'action': 'HYPHEN', 'dfa': {'startState': 0, 'sigma': ['-'], 'finStates': [1], 'deltaT': [[1], [None]]}},
	{'regex': '\\.', 'action': 'WILDCARD', 'dfa': {'startState': 0, 'sigma': ['.'], 'finStates': [1], 'deltaT': [[1], [None]]}},
	{'regex': '\\\\', 'action': 'BSLASH', 'dfa': {'startState': 0, 'sigma': ['\\'], 'finStates': [1], 'deltaT': [[1], [None]]}},
	{'regex': '_', 'action': 'UNDERSCORE', 'dfa': {'startState': 0, 'sigma': ['_'], 'finStates': [1], 'deltaT': [[1], [None]]}},
	{'regex': 'n', 'action': 'N', 'dfa': {'startState': 0, 'sigma': ['n'], 'finStates': [1], 'deltaT': [[1], [None]]}},
	{'regex': 't', 'action': 'T', 'dfa': {'startState': 0, 'sigma': ['t'], 'finStates': [1], 'deltaT': [[1], [None]]}},
	{'regex': 'r', 'action': 'R', 'dfa': {'startState': 0, 'sigma': ['r'], 'finStates': [1], 'deltaT': [[1], [None]]}},
	{'regex': '[^\\^\\*\\+\\?\\|\\.\\(\\)\\[\\]ntr\\\\]', 'action': 'CHAR', 'dfa': {'startState': 0, 'sigma': ['Z', '/', 'L', '>', '"', '=', 'd', '&', "'", '0', 'c', 'w', 'N', '6', 'p', 'E', 'O', 'm', '-', 'f', 'S', ' ', '9', 'T', 'l', ':', 'B', 'V', '\n', 's', '4', 'u', 'P', '{', '5', '1', 'j', '7', ',', 'M', 'G', 'b', 'z', 'D', 'k', 'x', '@', 'y', 'v', '8', '$', '~', 'U', 'F', 'g', 'A', 'J', 'I', '`', 'K', 'Y', ';', '}', 'i', '2', 'a', '\t', 'C', '<', 'q', 'H', 'R', 'W', 'Q', 'e', '_', '#', '%', 'h', 'o', '!', 'X', '3'], 'finStates': [1], 'deltaT': [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]]}},
	{'regex': '.', 'action': '(ERR) "Bad input"', 'dfa': {'startState': 0, 'sigma': ['\t', '~', '}', '|', '{', 'z', 'y', 'x', 'w', 'v', 'u', 't', 's', 'r', 'q', 'p', 'o', 'n', 'm', 'l', 'k', 'j', 'i', 'h', 'g', 'f', 'e', 'd', 'c', 'b', 'a', '`', '_', '^', ']', '\\', '[', 'Z', 'Y', 'X', 'W', 'V', 'U', 'T', 'S', 'R', 'Q', 'P', 'O', 'N', 'M', 'L', 'K', 'J', 'I', 'H', 'G', 'F', 'E', 'D', 'C', 'B', 'A', '@', '?', '>', '=', '<', ';', ':', '9', '8', '7', '6', '5', '4', '3', '2', '1', '0', '/', '.', '-', ',', '+', '*', ')', '(', "'", '&', '%', '$', '#', '"', '!', ' '], 'finStates': [1], 'deltaT': [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]]}},
]