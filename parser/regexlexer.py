#!/usr/bin/env python3
import parser.lex as lex

lex.rules = {
    0: {'regex': '\\(', 'action': 'LPAREN', 'dfa': {'startState': 0, 'sigma': ['('], 'finStates': [1], 'deltaT': [[[1]], [[]]]}},
    1: {'regex': '\\)', 'action': 'RPAREN', 'dfa': {'startState': 0, 'sigma': [')'], 'finStates': [1], 'deltaT': [[[1]], [[]]]}},
    2: {'regex': '\\[', 'action': 'LBRAC', 'dfa': {'startState': 0, 'sigma': ['['], 'finStates': [1], 'deltaT': [[[1]], [[]]]}},
    3: {'regex': '\\]', 'action': 'RBRAC', 'dfa': {'startState': 0, 'sigma': [']'], 'finStates': [1], 'deltaT': [[[1]], [[]]]}},
    4: {'regex': '\\*', 'action': 'KLEENE', 'dfa': {'startState': 0, 'sigma': ['*'], 'finStates': [1], 'deltaT': [[[1]], [[]]]}},
    5: {'regex': '\\+', 'action': 'PLUS', 'dfa': {'startState': 0, 'sigma': ['+'], 'finStates': [1], 'deltaT': [[[1]], [[]]]}},
    6: {'regex': '\\?', 'action': 'QUESTION', 'dfa': {'startState': 0, 'sigma': ['?'], 'finStates': [1], 'deltaT': [[[1]], [[]]]}},
    7: {'regex': '\\|', 'action': 'ALTERNATE', 'dfa': {'startState': 0, 'sigma': ['|'], 'finStates': [1], 'deltaT': [[[1]], [[]]]}},
    8: {'regex': '\\^', 'action': 'CARET', 'dfa': {'startState': 0, 'sigma': ['^'], 'finStates': [1], 'deltaT': [[[1]], [[]]]}},
    9: {'regex': '\\-', 'action': 'HYPHEN', 'dfa': {'startState': 0, 'sigma': ['-'], 'finStates': [1], 'deltaT': [[[1]], [[]]]}},
    10: {'regex': '\\.', 'action': 'WILDCARD', 'dfa': {'startState': 0, 'sigma': ['.'], 'finStates': [1], 'deltaT': [[[1]], [[]]]}},
    11: {'regex': '\\\\', 'action': 'BSLASH', 'dfa': {'startState': 0, 'sigma': ['\\'], 'finStates': [1], 'deltaT': [[[1]], [[]]]}},
    12: {'regex': '_', 'action': 'UNDERSCORE', 'dfa': {'startState': 0, 'sigma': ['_'], 'finStates': [1], 'deltaT': [[[1]], [[]]]}},
    13: {'regex': 'n', 'action': 'N', 'dfa': {'startState': 0, 'sigma': ['n'], 'finStates': [1], 'deltaT': [[[1]], [[]]]}},
    14: {'regex': 't', 'action': 'T', 'dfa': {'startState': 0, 'sigma': ['t'], 'finStates': [1], 'deltaT': [[[1]], [[]]]}},
    15: {'regex': 'r', 'action': 'R', 'dfa': {'startState': 0, 'sigma': ['r'], 'finStates': [1], 'deltaT': [[[1]], [[]]]}},
    16: {'regex': '[^\\^\\*\\+\\?\\|\\.\\(\\)\\[\\]ntr\\\\]', 'action': 'CHAR', 'dfa': {'startState': 0, 'sigma': ['N', '4', 'j', '2', 'E', ':', '6', '}', 'm', 'a', 'y', '~', '%', 'T', 'l', '#', '_', 'Y', 'b', 'd', 'W', 'C', '3', 'G', '`', 'p', 'o', 'x', 'A', 'S', 'q', '>', '&', ' ', 'F', 'I', '<', 'e', 'w', '0', 'L', '{', '5', '8', 'J', 'X', '!', 'R', 'v', 'u', '$', '-', 'c', 'g', '/', 'V', '"', 'z', 'O', '\t', 'B', 'D', 'i', 'f', 'M', 'H', '1', 'k', '9', '@', 's', 'K', ';', 'h', 'Q', "'", 'P', '=', '\n', 'Z', '7', 'U', ','], 'finStates': [1], 'delta}},
    17: {'regex': '.', 'action': '(ERR) "Bad input"', 'dfa': {'startState': 0, 'sigma': ['\t', '~', '}', '|', '{', 'z', 'y', 'x', 'w', 'v', 'u', 't', 's', 'r', 'q', 'p', 'o', 'n', 'm', 'l', 'k', 'j', 'i', 'h', 'g', 'f', 'e', 'd', 'c', 'b', 'a', '`', '_', '^', ']', '\\', '[', 'Z', 'Y', 'X', 'W', 'V', 'U', 'T', 'S', 'R', 'Q', 'P', 'O', 'N', 'M', 'L', 'K', 'J', 'I', 'H', 'G', 'F', 'E', 'D', 'C', 'B', 'A', '@', '?', '>', '=', '<', ';', ':', '9', '8', '7', '6', '5', '4', '3', '2', '1', '0', '/', '.', '-', ',', '+', '*', ')', '(', "'", '&', '%', '$', '#', '"', '!', ' '], 'finStates': [1], 'deltaT': [[[1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1]], [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]]}},
}