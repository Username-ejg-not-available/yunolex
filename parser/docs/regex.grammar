re := union
    | simplere
union := re ALTERNATE simplere #1
simplere := concat
    | basicre
concat := simplere basicre #2
basicre := star
    | plus
    | question
    | elemre
star := elemre KLEENE #3
plus := elemre PLUS #4
question := elemre QUESTION #5
elemre := group
    | any
    | char
    | set
group := LPAREN re RPAREN
any := WILDCARD #6
char := CHAR #7
    | NEWLINE #7
    | SPACE #7
    | BSLASH #7
    | SQUOTE #7
    | DQUOTE #7
    | TAB #7
    | RETURN #7
    | HYPHENCHAR #7
    | WILDCARDCHAR #7
    | PLUSCHAR #7
    | CARETCHAR #7
    | RPARENCHAR #7
    | LPARENCHAR #7
    | LBRACCHAR #7
    | RBRACCHAR #7
    | KLEENECHAR #7
    | QUESTIONCHAR #7
    | ALTERNATECHAR #7
set := posset
    | negset
posset := LBRAC setitems RBRAC #8
negset := LBRAC CARET setitems RBRAC #9
setitems := setitem
    | setitem setitems #10
setitem := range
    | char #11
range := char HYPHEN char #12

###

requires {
    import RegexTree as RT
}

#1 {
    p.semstack = [RT.Split(p.semstack[1], p.semstack[0])] + p.semstack[2:]
}

#2 {
    p.semstack = [RT.Concat(p.semstack[1], p.semstack[0])] + p.semstack[2:]
}

#3 {
    p.semstack = [RT.MeanKleene(p.semstack[0])] + p.semstack[1:]
}

#4 {
    p.semstack = [RT.Concat(p.semstack[0], RT.MeanKleene(p.semstack[0]))] + p.semstack[1:]
}

#5 {
    p.semstack = [RT.Split(p.semstack[0],None)] + p.semstack[1:]
}

#6 {
    p.semstack = [RT.Prim(".", True)] + p.semstack
}

#7 {
    p.semstack = [RT.Prim(p.currentToken, False)] + p.semstack
}

#8 {
    p.semstack = [RT.CharSelect(p.semstack[0])] + p.semstack[1:]
}

#9 {
    items = list(set(list(map(lambda x: chr(x), range(32, 127))) + ['\n', '\t']) - set(p.semstack[0]))
    p.semstack = [RT.CharSelect(items)] + p.semstack[1:]
}

#10 {
    p.semstack = [p.semstack[1] + p.semstack[0]] + p.semstack[2:]
}

#11 {
    p.semstack = [[p.semstack[0].regex]] + p.semstack[1:]
}

#12 {
    char1 = p.semstack[1].regex
    char2 = p.semstack[0].regex
    if ord(char1) > ord(char2):
        raise Exception("Bad range: " + char1 + "-" + char2)
    p.semstack = [list(map(lambda x : chr(x), range(ord(char1), ord(char2)+1)))] + p.semstack[2:]
}