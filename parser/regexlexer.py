#!/usr/bin/env python3
import parser.lex as lex

lex.rules = {
    0: {'regex': '\\(', 'action': 'LPAREN false', 'dfa': {'startState': 0, 'sigma': ['\\('], 'finStates': [1], 'deltaT': [[[1]], [[]]]}},
    1: {'regex': '\\)', 'action': 'RPAREN false', 'dfa': {'startState': 0, 'sigma': ['\\)'], 'finStates': [1], 'deltaT': [[[1]], [[]]]}},
    2: {'regex': '\\[', 'action': 'LBRAC false', 'dfa': {'startState': 0, 'sigma': ['\\['], 'finStates': [1], 'deltaT': [[[1]], [[]]]}},
    3: {'regex': '\\]', 'action': 'RBRAC false', 'dfa': {'startState': 0, 'sigma': ['\\]'], 'finStates': [1], 'deltaT': [[[1]], [[]]]}},
    4: {'regex': '\\*', 'action': 'KLEENE false', 'dfa': {'startState': 0, 'sigma': ['\\*'], 'finStates': [1], 'deltaT': [[[1]], [[]]]}},
    5: {'regex': '\\?', 'action': 'QUESTION false', 'dfa': {'startState': 0, 'sigma': ['\\?'], 'finStates': [1], 'deltaT': [[[1]], [[]]]}},
    6: {'regex': '\\+', 'action': 'PLUS false', 'dfa': {'startState': 0, 'sigma': ['\\+'], 'finStates': [1], 'deltaT': [[[1]], [[]]]}},
    7: {'regex': '\\^', 'action': 'CARET false', 'dfa': {'startState': 0, 'sigma': ['\\^'], 'finStates': [1], 'deltaT': [[[1]], [[]]]}},
    8: {'regex': '\\|', 'action': 'ALTERNATE false', 'dfa': {'startState': 0, 'sigma': ['\\|'], 'finStates': [1], 'deltaT': [[[1]], [[]]]}},
    9: {'regex': '\\-', 'action': 'HYPHEN false', 'dfa': {'startState': 0, 'sigma': ['\\-'], 'finStates': [1], 'deltaT': [[[1]], [[]]]}},
    10: {'regex': '\\\\n', 'action': 'NEWLINE true', 'dfa': {'startState': 0, 'sigma': ['\\\\', 'n'], 'finStates': [2], 'deltaT': [[[1], []], [[], [2]], [[], []]]}},
    11: {'regex': '\\\\_', 'action': 'SPACE true', 'dfa': {'startState': 0, 'sigma': ['\\\\', '_'], 'finStates': [2], 'deltaT': [[[1], []], [[], [2]], [[], []]]}},
    12: {'regex': '\\\\\\\\', 'action': 'BSLASH true', 'dfa': {'startState': 0, 'sigma': ['\\\\'], 'finStates': [2], 'deltaT': [[[1]], [[2]], [[]]]}},
    13: {'regex': "\\\\'", 'action': 'SQUOTE true', 'dfa': {'startState': 0, 'sigma': ['\\\\', "'"], 'finStates': [2], 'deltaT': [[[1], []], [[], [2]], [[], []]]}},
    14: {'regex': '\\\\"', 'action': 'DQUOTE true', 'dfa': {'startState': 0, 'sigma': ['\\\\', '"'], 'finStates': [2], 'deltaT': [[[1], []], [[], [2]], [[], []]]}},
    15: {'regex': '\\\\t', 'action': 'TAB true', 'dfa': {'startState': 0, 'sigma': ['\\\\', 't'], 'finStates': [2], 'deltaT': [[[1], []], [[], [2]], [[], []]]}},
    16: {'regex': '\\\\r', 'action': 'RETURN true', 'dfa': {'startState': 0, 'sigma': ['\\\\', 'r'], 'finStates': [2], 'deltaT': [[[1], []], [[], [2]], [[], []]]}},
    17: {'regex': '\\.', 'action': 'WILDCARD false', 'dfa': {'startState': 0, 'sigma': ['\\.'], 'finStates': [1], 'deltaT': [[[1]], [[]]]}},
    18: {'regex': '\\\\\\.', 'action': 'WILDCARDCHAR true', 'dfa': {'startState': 0, 'sigma': ['\\\\', '\\.'], 'finStates': [2], 'deltaT': [[[1], []], [[], [2]], [[], []]]}},
    19: {'regex': '\\\\\\+', 'action': 'PLUSCHAR true', 'dfa': {'startState': 0, 'sigma': ['\\\\', '\\+'], 'finStates': [2], 'deltaT': [[[1], []], [[], [2]], [[], []]]}},
    20: {'regex': '\\\\\\^', 'action': 'CARETCHAR true', 'dfa': {'startState': 0, 'sigma': ['\\\\', '\\^'], 'finStates': [2], 'deltaT': [[[1], []], [[], [2]], [[], []]]}},
    21: {'regex': '\\\\\\)', 'action': 'RPARENCHAR true', 'dfa': {'startState': 0, 'sigma': ['\\\\', '\\)'], 'finStates': [2], 'deltaT': [[[1], []], [[], [2]], [[], []]]}},
    22: {'regex': '\\\\\\(', 'action': 'LPARENCHAR true', 'dfa': {'startState': 0, 'sigma': ['\\\\', '\\('], 'finStates': [2], 'deltaT': [[[1], []], [[], [2]], [[], []]]}},
    23: {'regex': '\\\\\\-', 'action': 'HYPHENCHAR true', 'dfa': {'startState': 0, 'sigma': ['\\\\', '\\-'], 'finStates': [2], 'deltaT': [[[1], []], [[], [2]], [[], []]]}},
    24: {'regex': '\\\\\\[', 'action': 'LBRACCHAR true', 'dfa': {'startState': 0, 'sigma': ['\\\\', '\\['], 'finStates': [2], 'deltaT': [[[1], []], [[], [2]], [[], []]]}},
    25: {'regex': '\\\\\\]', 'action': 'RBRACCHAR true', 'dfa': {'startState': 0, 'sigma': ['\\\\', '\\]'], 'finStates': [2], 'deltaT': [[[1], []], [[], [2]], [[], []]]}},
    26: {'regex': '\\\\\\*', 'action': 'KLEENECHAR true', 'dfa': {'startState': 0, 'sigma': ['\\\\', '\\*'], 'finStates': [2], 'deltaT': [[[1], []], [[], [2]], [[], []]]}},
    27: {'regex': '\\\\\\?', 'action': 'QUESTIONCHAR true', 'dfa': {'startState': 0, 'sigma': ['\\\\', '\\?'], 'finStates': [2], 'deltaT': [[[1], []], [[], [2]], [[], []]]}},
    28: {'regex': '\\\\\\|', 'action': 'ALTERNATECHAR true', 'dfa': {'startState': 0, 'sigma': ['\\\\', '\\|'], 'finStates': [2], 'deltaT': [[[1], []], [[], [2]], [[], []]]}},
    29: {'regex': '[^\\^\\*\\+\\?\\|\\.\\(\\)\\-\\\\\\n\\t\\r]', 'action': 'CHAR true', 'dfa': {'startState': 0, 'sigma': ["'", ']', '<', ':', '.', 'h', 'w', '>', 'I', 'a', '/', '@', 'B', '~', 'E', 'c', '^', '*', '_', '5', 'S', 'J', 'F', '8', 't', 'f', '-', '\n', ' ', 's', 'X', 'W', 'j', 'M', 'q', '\\', '&', 'l', '"', 'o', 'Q', ')', '+', '2', 'y', 'D', 'b', '=', 'm', ',', 'd', 'G', 'r', 'Z', 'U', 'e', 'N', 'p', '!', 'Y', 'A', 'i', 'L', '4', '`', 'R', 'g', '3', '|', '#', 'x', '(', ';', 'K', '0', '[', 'n', '\t', 'u', 'V', '}', 'H', 'T', '7', 'C', '{', 'v', 'P', 'k', '1', 'z', '$', '6', 'O', '?', '9', '%'], 'finStates': [1], 'delta}},
    30: {'regex': '\\_|\\t|\\n|\\r', 'action': '(SKIP)', 'dfa': {'startState': 0, 'sigma': ['\\_', '\\t', '\\n', '\\r'], 'finStates': [1, 2, 3, 4], 'deltaT': [[[1], [2], [3], [4]], [[], [], [], []], [[], [], [], []], [[], [], [], []], [[], [], [], []]]}},
    31: {'regex': '.', 'action': '(ERR) "Bad input"', 'dfa': {'startState': 0, 'sigma': ['\t', '~', '}', '|', '{', 'z', 'y', 'x', 'w', 'v', 'u', 't', 's', 'r', 'q', 'p', 'o', 'n', 'm', 'l', 'k', 'j', 'i', 'h', 'g', 'f', 'e', 'd', 'c', 'b', 'a', '`', '_', '^', ']', '\\', '[', 'Z', 'Y', 'X', 'W', 'V', 'U', 'T', 'S', 'R', 'Q', 'P', 'O', 'N', 'M', 'L', 'K', 'J', 'I', 'H', 'G', 'F', 'E', 'D', 'C', 'B', 'A', '@', '?', '>', '=', '<', ';', ':', '9', '8', '7', '6', '5', '4', '3', '2', '1', '0', '/', '.', '-', ',', '+', '*', ')', '(', "'", '&', '%', '$', '#', '"', '!', ' '], 'finStates': [1], 'delta}},
}
